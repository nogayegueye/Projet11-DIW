swagger: "2.0"
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: "1.0.0"
  termsOfService: "http://swagger.io/terms/"
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: "#/definitions/Login"
      produces:
        - application/json
      responses:
        "200":
          description: Login Successfully
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: "#/definitions/User"
      produces:
        - application/json
      responses:
        "200":
          description: Signup Successfully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      #produces:
      # - application/json
      responses:
        "200":
          description: User profile retrieved successully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: "#/definitions/UserProfile"
      produces:
        - application/json
      responses:
        "200":
          description: User profile retrieved successully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
  /transactions:
    get:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: Transaction API
      description: API for all transactions
      produces:
        - application/json
      responses:
        "200":
          description: Login Successfully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: Add a new transaction
      description: This route allows users to add a new transaction.
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: "#/definitions/ApiResponse"
      produces:
        - application/json
      responses:
        "200":
          description: Login Successfully
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid Fields
        "500":
          description: Internal Server Error
  /transactions/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: "Retrieve details of a specific transaction"
      description: "This route allows users to retrieve the details of a specific transaction using its transactionId."
      produces:
        - "application/json"
      parameters:
        - name: "transactionId"
          in: "path"
          description: "Identifier of the transaction to retrieve details for."
          required: true
          type: "string"
      responses:
        '200':
          description: "Success: Transaction details retrieved successfully."
          schema:
            $ref: "#/definitions/Transaction"
        '400':
          description: "Not Found: The transaction with the specified transactionId was not found."
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: "Update information of a specific transaction"
      description: "This route allows users to update the information of a specific transaction using its transactionId."
      produces:
        - "application/json"
      parameters:
        - name: "transactionId"
          in: "path"
          description: "Identifier of the transaction to update."
          required: true
          type: "string"
        - name: "transactionUpdated"
          in: "body"
          description: "Updated information of the transaction."
          required: true
          schema:
            $ref: "#/definitions/Transaction"
      responses:
        '200':
          description: "Success: The transaction was updated successfully."
          schema:
            $ref: "#/definitions/Transaction"
        '400':
          description: "Bad Request: The request is malformed or missing required information."
        '500':
          description: "Not Found: The transaction with the specified transactionId was not found."

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
      userName:
        type: string
        description: user public name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      userName:
        type: string
  Transaction:
    type: "object"
    properties:
      id:
        type: "string"
        example: "123456"
      date:
        type: "string"
        format: "date"
        example: "2023-07-21"
      description:
        type: "string"
        example: "Grocery shopping"
      amount:
        type: "number"
        format: "float"
        example: "50.25"

